version: "3.9"

services:
  redis:
    container_name: redis
    image: redis
    restart: always
    networks:
      - my_network
    command: redis-server --save 60 1 --loglevel warning

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    networks:
      - my_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build: .
    container_name: backend
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn core.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./core:/app
      - ./pytest.ini:/app/pytest.ini
      - static_volume:/app/static
      - media_volume:/app/media
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - redis
      - postgres 
    networks:
      - my_network

  nginx:
    image: nginx
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/home/app/static
      - media_volume:/home/app/media
    depends_on:
      - redis
      - backend
    networks:
      - my_network

  worker:
    build: .
    command: celery -A core worker --loglevel=info
    volumes:
      - ./core:/app
    depends_on:
      - redis
      - backend
      - postgres
    networks:
      - my_network
  
  beat:
    build: .
    command: celery -A core beat --loglevel=info
    volumes:
      - ./core:/app
    depends_on:
      - redis
      - backend
      - postgres 
    networks:
      - my_network

volumes:
  static_volume:
  media_volume:
  postgres_data:

networks:
  my_network: